@model IEnumerable<APPDATA.Models.BillDetail>

@{

    @using APPDATA.Models;
    @using System.Globalization
    ViewData["Title"] = "BanHangOff";
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
    List<ProductDetail> prddt = ViewBag.productdt as List<ProductDetail>;
    List<Size> size = ViewBag.size as List<Size>;
    List<Color> color = ViewBag.color as List<Color>;
    List<Bill> bils = ViewBag.bil;
    Bill bil = null;
    @if (Model != null)
    {
         bil = bils.FirstOrDefault(c => c.id == Model.FirstOrDefault().BIllId);

    }

}
<style>
    span {
        display: block; /* Để mỗi span hiển thị trên một dòng */
        margin-bottom: 5px; /* Khoảng cách giữa các dòng */
        font-weight: bold; /* Chữ đậm */
    }

    input[type="text"],
    input[type="number"] {
        width: 100%; /* Ở đây tôi sử dụng 100% để nó mở rộng hết chiều rộng của phần tử chứa */
        padding: 8px; /* Độ dày của viền */
        margin-bottom: 10px; /* Khoảng cách giữa các ô input */
        border: 1px solid #ccc; /* Viền của ô input */
        border-radius: 5px; /* Bo góc của ô input */
    }

    #tienthua,
    #error {
        color: red; /* Màu chữ đỏ cho thông báo */
        font-weight: bold; /* Chữ đậm */
    }

    .btn {
        display: inline-block;
        padding: 10px 20px;
        font-size: 16px;
        text-align: center;
        text-decoration: none;
        outline: none;
        cursor: pointer;
        border-radius: 5px;
        transition: background-color 0.3s;
    }

    .btn-primary {
        background-color: #3498db;
        color: #fff;
        border: 1px solid #3498db;
    }

        .btn-primary:hover {
            background-color: #2980b9;
        }

    .card-header {
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

    #timkiem {
        height: 50px;
        width: 100%; /* Điều chỉnh chiều rộng của ô tìm kiếm */
        padding: 5px;
        border: 1px solid #ccc;
        border-radius: 5px;
    }

        #timkiem::placeholder {
            color: #999; /* Màu của placeholder */
        }
</style>

<style>
    /* Thêm CSS để định dạng hóa đơn */
    #productDetails {
        display: flex;
        flex-wrap: wrap;
     
        margin-top:5px;
    }
    .productDetail {
        flex: 0 1 calc(33.33% - 10px); /* Cố định 33.33% rộng cho mỗi hóa đơn và tạo khoảng trắng 5px giữa chúng */
        max-width: 700px;       
        margin-bottom: 5px; /* Thêm khoảng cách dưới cùng của mỗi hóa đơn là 5px */
   
    }
</style>

<body>
    <div class="col-md-5" id="container" style="text-align:center">
    </div>

    <div class="container-fluid">
        <div class="row">
            <!-- Phần bên trái để tạo hóa đơn -->
            <div class="col-md-5">
                <div class="card">
                  
                    <form action="~/qlbills/CreateBill" id="myForm" method="post">

                        <div class="card-body" id="cardBody">
                            @if (Model != null)
                            {
                                var billss = Model.FirstOrDefault();
                                <div id="productDetails">
                                    @foreach (var item in Model)
                                    {
                                        var prd = prddt.FirstOrDefault(c => c.Id == item.ProductDetailID);
                                        var siz = size.FirstOrDefault(c => c.Id == prd.Id_Size);
                                        var colo = color.FirstOrDefault(c => c.Id == prd.Id_Color);

                                        <div class="productDetail" style="margin-left:10px;">
                                            <p style="font-weight: bold; margin-bottom: 5px;" data-productid="@prd.Id">@prd.Name</p>
                                            <p style="font-style: italic; margin-bottom: 5px;">Size: @siz.Name | Màu: @colo.Name</p>

                                            <div style="display: flex; align-items: center; margin-top: 5px;">
                                                <p>Số lượng: </p>
                                                <input type="number" value="@item.Amount" min="1" max="@prd.Quantity" name="soluong" style="margin-left: 5px; margin-bottom: 12px; width: 50px; "onchange=" updateProduct(this)">
                                                <input type="hidden" value="@item.ProductDetailID" class="prdid" name="productId">
                                                <input type="hidden" value="@prd.Price" class="prdgia">
                                            </div>
                                            <span style=" margin-bottom: 5px;" class="productPrice">@item.Price </span>
                                            <!-- Continue adding other elements and styling as needed -->

                                            <button type="button" style="width: 170px;margin-top:12px; margin-bottom: 17px; background-color: #F08080; color: #fff; border: none; border-radius: 17px; padding: 5px 10px; text-align:center" onclick="cancelSelection(this)">
                                                Hủy chọn
                                            </button>
                                        </div>
                                    }
                                </div>

                                if (billss.BIllId!= Guid.Empty)
                                
                                {
                                    <input type="hidden" value="@billss.BIllId" name="idbill">
                                }
                            }
                        </div>
                        <div class="card-footer">
                            <span>Số điện thoại :</span>
                            @if(bil==null){
                                <input type="text" id="sdt" name="sdt" onchange="layTenKhachHang()">

                            }
                            else
                            {
                                <input type="text" value="@bil.PhoneNumber " id="sdt" name="sdt" onchange="layTenKhachHang()">

                            }
                            <span class="text-danger" id="phoneError"></span>
                            <span>Tên khách hàng :</span>
                            @if (bil == null)
                            {
                                <input type="text" id="tenkh" name="tenkh">

                            }
                            else
                            {
                                <input type="text" value="@bil.Name" id="tenkh" name="tenkh">


                            }

                            <span>Tiền khách đưa :</span>
                            <input type="number" min="1" id="khachdua" onchange="tinhTienThua()">
                            <span id="khachdua-error" class="text-danger"></span>
                            <span>Tổng tiền :</span>
                            <input type="hidden" min="1" id="tong" name="tongtien" readonly="readonly" style="border:none"> <br />
                            <span id="tong2"></span>
                            <span id="tienthua"></span>
                            <span id="error"></span>

                          
                            <span id="hoa-don-error" class="text-danger"></span>
                            <div class="row">
                                <!-- Phần bên trái để tạo hóa đơn -->
                                <div class="col-md-5">
                                    <button type="submit" class="btn btn-primary" style="margin-top:15px">Tạo Hóa Đơn</button>

                                </div>
                                <div class="col-md-5">
                                    <button type="button" onclick="refreshPage()" class="btn btn-primary" style="margin-top:15px">Làm mới trang</button>


                                </div>
                                @if (Model!=null)
                                
                                {


                                }
                                else
                                {
                                    <div class="col-md-5">
                                        <button type="submit" onclick="submitForm('doncho')" class="btn btn-primary" style="margin-top:15px">Tạo đơn chờ</button>

                                    </div>

                                }
                                <div class="col-md-5">
                                    <button type="button" id="quet" class="btn btn-primary" style="margin-top:15px">Quét QR</button>

                                </div>
                                
                            </div>
                        </div>

                    </form>
                   
                </div>
            </div>
            <!-- Phần bên phải để hiển thị sản phẩm -->
            <div class="col-md-7">
                <!-- Danh sách sản phẩm -->

                <div class="card">
                    <div class="card-header">
                        <input type="text" id="timkiem" placeholder="Tìm Kiếm....">
                    </div>
                    <div class="card-body">
                        <div class="row" id="divToUpdate">

                            @foreach (var item in ViewBag.productdt)
                            {


                                <div class="col-md-6 col-lg-4 col-xl-3">
                                    <div class="card text-center card-product">

                                        <div class="card-product__img">
                                            @foreach (var img in ViewBag.Img)
                                            {
                                                if (img.IdProductdetail == item.Id)
                                                {
                                                    <img class="card-img" style="width:150p;height:200px" src="~/images/@img.Name" alt="">
                                                    break;
                                                }

                                            }



                                            <button class="btn btn-primary" style="margin-top:10px" data-id="@item.Id">Chọn sản phẩm</button>

                                        </div>
                                        <div class="card-body">

                                            <p style="text-align:left;display: inline-block;width: 700px;font-size:13px">
                                                @item.Name
                                            </p>
                                            @foreach (var size1 in ViewBag.size)
                                            {
                                                if (size1.Id == item.Id_Size)
                                                {
                                                    <p style="text-align:left">Sise : @size1.Name</p>
                                                    break;
                                                }

                                            }

                                            @foreach (var size2 in ViewBag.color)
                                            {
                                                if (size2.Id == item.Id_Color)
                                                {
                                                    <p style="text-align:left"> Màu: @size2.Name</p>
                                                    break;
                                                }

                                            }

                                            <p style="text-align:left">Giá : @item.Price.ToString("C0", new CultureInfo("vi-VN"))</p>
                                        </div>
                                    </div>
                                </div>


                            }


                        </div>
                    </div>
                </div>
            </div>



</body>





<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.rawgit.com/schmich/instascan-builds/master/instascan.min.js"></script>

<script>
  
    const chosenProducts = {};
    let totalPrice = 0;
    function calculateTotal() {
        var tongtien = 0;

        // Lặp qua tất cả các sản phẩm
        var productDetails = document.getElementsByClassName('productDetail');
        for (var i = 0; i < productDetails.length; i++) {
            var priceElement = productDetails[i].querySelector('.productPrice');
            var quantityElement = productDetails[i].querySelector('input[name="soluong"]');
            var prdid = productDetails[i].querySelector('.prdid').value;
     
            // Lấy giá và số lượng từ mỗi sản phẩm
            var price = parseFloat(priceElement.textContent.trim());
            var quantity = parseInt(quantityElement.value);

            // Tính tổng giá của sản phẩm hiện tại

            chosenProducts[prdid] = true;
            // Cộng tổng giá của sản phẩm vào tổng giá chung
            totalPrice += price;
            priceElement.textContent = formatPrice(price);
        }
        const tongtienvl = document.getElementById('tong');

        tongtienvl.value = totalPrice; // Cập nhật tổng giá vào input có id là 'tong'
        const tongtienct = document.getElementById('tong2');
        // Hiển thị tổng giá
        tongtienct.textContent = formatPrice(totalPrice);
        console.log(chosenProducts);

    }

    function updateProduct(inputElement) {
        var productDetail = inputElement.closest('.productDetail');
        var priceElement = productDetail.querySelector('.productPrice');
        var prdid = productDetail.querySelector('.prdid').value;
        var prdgia = productDetail.querySelector('.prdgia').value;
        console.log(prdid); console.log(prdgia);
        // Lấy số lượng và giá hiện tại
        var quantity = parseInt(inputElement.value);
        var quydoi = priceElement.textContent.replace(/[^\d]/g, '');

        // Chuyển đổi giá trị số thành số nguyên
        var quydoi2 = parseInt(quydoi);
        console.log(quydoi2);
        var price = parseFloat(quydoi2);
        console.log(price);
        // Cập nhật tổng giá bằng cách trừ giá cũ của sản phẩm và cộng giá mới
        totalPrice = totalPrice - price;
        totalPrice = totalPrice + prdgia * quantity;



        // Cập nhật giá sản phẩm trong giao diện người dùng
        priceElement.textContent = formatPrice(prdgia * quantity);

        // Cập nhật tổng giá trong giao diện người dùng
        const tongtienvl = document.getElementById('tong');
        tongtienvl.value = totalPrice;

        const tongtienct = document.getElementById('tong2');
        tongtienct.textContent = formatPrice(totalPrice);
    }
   

@*     function cancelSelection(button) {

        var productDetailDiv = button.closest('.productDetail');
        productDetailDiv.remove();

        // Add logic here to update the total amount
        // For example, you can call a function or update a variable that holds the total amount
        updateTotalAmount();
    } *@
    function cancelSelection(button) {

        var productDetailDiv = button.closest('.productDetail');
            var trugia = productDetailDiv.querySelector('.productPrice');
        var vlgia = trugia.textContent.replace(/[^\d]/g, '');
            var idprds = productDetailDiv.querySelector('.prdid').value;

      

            chosenProducts[idprds] = false;

        // Chuyển đổi giá trị số thành số nguyên
        var priceValue = parseInt(vlgia);
        totalPrice -= priceValue;
        const tongtienupto = document.getElementById('tong');
        tongtienupto.value = totalPrice;

        const tongtienupto2 = document.getElementById('tong2');
        tongtienupto2.textContent = formatPrice(totalPrice);

        productDetailDiv.remove();


    }
@* 
    function updateTotalAmount() {
        var productDetailDiv = getElementsByClassName('.productDetail');
            var trugia = productDetailDiv.querySelector('.productPrice');
        var vlgia = trugia.textContent.replace(/[^\d]/g, '');

        // Chuyển đổi giá trị số thành số nguyên
        var priceValue = parseInt(numericValue);
        totalPrice -= vlgia;
        const tongtienupto = document.getElementById('tong');
        tongtienupto.value = totalPrice;

        const tongtienupto2 = document.getElementById('tong2');
        tongtienupto2.textContent = formatPrice(totalPrice);
    } *@
    // Gọi hàm khi trang được tải
    window.onload = calculateTotal;
    

    $('#divToUpdate').on('click', 'button[data-id]', function(event) {
        event.preventDefault();
        const cardBody = document.querySelector('.card-body');
        const productId = $(this).attr('data-id');
        cardBody.style.display = 'flex';
        cardBody.style.flexWrap = 'wrap';
        cardBody.style.gap = '30px'; //

        if (!chosenProducts[productId]) { // Kiểm tra nếu sản phẩm chưa được chọn
            chosenProducts[productId] = true; // Đánh dấu sản phẩm đã chọn

            const xhr = new XMLHttpRequest();
            xhr.open('POST', '/QLBills/ChosenProduct');
            xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
            xhr.onreadystatechange = function() {
                if (xhr.readyState === XMLHttpRequest.DONE) {
                    if (xhr.status === 200) {
                        const response = JSON.parse(xhr.responseText);
                        if (response.success) {
                            // Xử lý thông tin sản phẩm được chọn tương tự như trong đoạn mã hiện tại
                            // ...
                            const product = response.sanphamchitiets[0]; // Lấy thông tin sản phẩm
                            const size = response.size;
                            const color = response.color;

                            const productContainer = document.createElement('div');
                            productContainer.style.display = 'flex';
                            productContainer.style.flexDirection = 'column'; // Hiển thị các phần tử theo chiều dọc
                            productContainer.style.maxWidth = '700px'; // Hiển thị các phần tử theo chiều dọc
                            cardBody.appendChild(productContainer);

                            const productName = document.createElement('p');
                            productName.textContent = `${product.name}`;
                            productName.setAttribute('data-productid', product.id);
                            productName.style.fontWeight = 'bold';
                            productName.style.marginBottom = '5px';

                            const sizeAndColor = document.createElement('p');
                            sizeAndColor.textContent = `Size: ${size} | Màu: ${color}`;
                            sizeAndColor.style.fontStyle = 'italic';
                            sizeAndColor.style.marginBottom = '5px';

                            productContainer.appendChild(productName);
                            productContainer.appendChild(sizeAndColor);

                            const productInfoContainer = document.createElement('div');
                            productInfoContainer.style.display = 'flex';
                            productInfoContainer.style.alignItems = 'center'; // Căn giữa các phần tử con theo chiều dọc
                            productInfoContainer.style.marginTop = '5px'; // Khoảng cách từ tên sản phẩm đến số lượng

                            const productQuantityLabel = document.createElement('p');
                            productQuantityLabel.textContent = 'Số lượng: ';
                            productInfoContainer.appendChild(productQuantityLabel);


                            const productQuantityInput = document.createElement('input');
                            productQuantityInput.setAttribute('type', 'number');
                            productQuantityInput.setAttribute('value', '1')

                            productQuantityInput.setAttribute('min', '1');
                            productQuantityInput.setAttribute('max', product.quantity);
                            productQuantityInput.setAttribute('name', 'soluong');
                            productQuantityInput.style.marginLeft = '5px';
                            productQuantityInput.style.marginBottom = '12px';
                            productQuantityInput.style.width = '50px';
                            const idprd = document.createElement('input');
                            idprd.setAttribute('type', 'hidden');
                            idprd.setAttribute('value', product.id);

                            idprd.setAttribute('name', 'productId');


                            productInfoContainer.appendChild(idprd);

                            productInfoContainer.appendChild(productQuantityInput);

                            const productPriceContainer = document.createElement('p');
                            productPriceContainer.style.display = 'flex';
                            productPriceContainer.style.alignItems = 'center';

                            const productPrice = document.createElement('span');
                            productPrice.textContent = `${formatPrice(product.price)}`;
                            productPriceContainer.appendChild(productPrice);
                            productPriceContainer.classList.add('product-price'); // Thêm lớp product-price vào phần tử chứa giá sản phẩm

                            const productPriceVND = document.createElement('span');

                            productPriceVND.style.marginLeft = '5px';
                            productPriceContainer.appendChild(productPriceVND);

                            const cancelButton = document.createElement('button');
                            //css
                            cancelButton.textContent = 'Hủy chọn';
                            cancelButton.setAttribute('type', 'button');
                            cancelButton.style.backgroundColor = '#F08080'; // Màu nền
                            cancelButton.style.color = '#fff'; // Màu chữ
                            cancelButton.style.border = 'none'; // Loại bỏ viền
                            cancelButton.style.borderRadius = '5px'; // Bo góc
                            cancelButton.style.padding = '5px 10px'; // Độ dày và khoảng cách giữa nút và chữ
                            //hàm
                            cancelButton.addEventListener('click', function() {
                                // Lấy nội dung của productPrice.textContent
                                var priceText = productPrice.textContent;

                                // Sử dụng biểu thức chính quy để loại bỏ tất cả các ký tự không phải số
                                var numericValue = priceText.replace(/[^\d]/g, '');

                                // Chuyển đổi giá trị số thành số nguyên
                                var priceValue = parseInt(numericValue);

                                // Trừ giá trị cuối cùng từ tổng giá
                                totalPrice -= priceValue;

                                // Cập nhật tổng giá vào input có id là 'tong'
                                tongInput1.value = totalPrice;
                                tongInput2.textContent = formatPrice(totalPrice);
                                // Xóa sản phẩm khỏi danh sách
                                delete chosenProducts[productId];

                                // Xóa sản phẩm khỏi giao diện người dùng
                                productContainer.remove();
                            });
                            cancelButton.style.width = '170px';
                            cancelButton.style.marginBottom = '17px';
                            cancelButton.style.backgroundColor = '#F08080';
                            cancelButton.style.borderRadius = '17px';
                            //
                            productContainer.appendChild(productInfoContainer);
                            productContainer.appendChild(productPriceContainer);
                            productContainer.appendChild(cancelButton);


                            cardBody.appendChild(productContainer);

                            const tongInput1 = document.getElementById('tong');
                            const productPriceValue = parseInt(productQuantityInput.value) * product.price;
                            totalPrice += productPriceValue; // Cộng giá sản phẩm vào tổng giá
                            tongInput1.value = totalPrice; // Cập nhật tổng giá vào input có id là 'tong'
                            const tongInput2 = document.getElementById('tong2');
                        
                            tongInput2.textContent = formatPrice(totalPrice); //
                            // Sự kiện thay đổi số lượng sản phẩm và tính tổng giá sản phẩm
                            productQuantityInput.addEventListener('change', function() {
                                const quantity = parseInt(productQuantityInput.value); // Lấy giá trị số lượng từ ô input

                                if (!isNaN(quantity) && quantity > 0) {
                                    const updatedPrice = product.price * quantity; // Tính giá sản phẩm mới dựa trên số lượng nhập vào
                                    var priceText1 = productPrice.textContent;
                                    // Trừ giá cũ khỏi tổng giá
                                    var priceText1 = productPrice.textContent;
                                    var numericValue = priceText1.replace(/[^\d]/g, '');

                                    // Chuyển đổi giá trị số thành số nguyên
                                    var priceValue = parseInt(numericValue);
                                    totalPrice -= priceValue;
                                    // Sử dụng biểu thức chính quy để loại bỏ tất cả các ký tự không phải số

                                    productPrice.textContent = `${formatPrice(updatedPrice)}`;

                                    totalPrice += updatedPrice; // Cộng giá mới vào tổng giá

                                    const tongInput = document.getElementById('tong');
                                    const tongInput2 = document.getElementById('tong2');
                                    if (tongInput) {
                                        tongInput.value = totalPrice;
                                        tongInput2.textContent = formatPrice(totalPrice);
                                        // Cập nhật tổng giá vào input có id là 'tong'
                                    }
                                } else {
                                    console.error('Số lượng không hợp lệ!');
                                }
                            });
                        } else {
                            console.error('Có lỗi xảy ra khi lấy thông tin sản phẩm');
                        }
                    } else {
                        console.error('Yêu cầu không thành công');
                    }
                }
            };
            xhr.send(`productId=${productId}`);
        } else {
            console.log('Sản phẩm đã được chọn trước đó');
            // Có thể hiển thị thông báo cho người dùng rằng sản phẩm đã được chọn trước đó
        }
    });
    $(document).ready(function() {
        $('#timkiem').on('input', function() {
            var searchText = $(this).val();

            // Gửi yêu cầu Ajax với dữ liệu searchText về server
            $.ajax({
                type: "POST",
                url: "/QLBills/TimKiem", // Thay đổi đường dẫn và thông tin tương ứng
                data: { searchText: searchText },
                success: function(data) {
                    if (data.success) {
                        var products = data.productct;
                        var sizes = data.size;
                        var colors = data.color;
                        var imgs = data.img;
                        var productsHTML = '';

                        products.forEach(function(item) {
                            var imgHTML = '';
                            imgs.forEach(function(img) {
                                if (img.idProductdetail == item.id) {
                                    imgHTML = '<img class="card-img"  style="width:150p;height:200px" src="/images/' + img.name + '" alt="">';
                                    return false;
                                }
                            });

                            var sizeHTML = '';
                            sizes.forEach(function(size) {
                                if (size.id == item.id_Size) {
                                    sizeHTML = '<p style="text-align:left">Size: ' + size.name + '</p>';
                                    return false;
                                }
                            });

                            var colorHTML = '';
                            colors.forEach(function(color) {
                                if (color.id == item.id_Color) {
                                    colorHTML = '<p style="text-align:left">Màu: ' + color.name + '</p>';
                                    return false;
                                }
                            });

                            var cardHtml = '<div class="col-md-6 col-lg-4 col-xl-3">' +
                                '<div class="card text-center card-product">' +
                                '<div class="card-product__img">' + imgHTML + '</div>' + // Đóng chuỗi HTML ở đây
                                '<button class="btn btn-primary" style="margin-top:10px" data-id="' + item.id + '">Chọn sản phẩm</button>' +
                                '</div>' +
                                '<div class="card-body">' +
                                '<p style="text-align:left;display: inline-block;width: 700px">Sản phẩm: ' + item.name + '</p>' +
                                sizeHTML + colorHTML +
                                '<p style="text-align:left">Giá: ' + formatPrice(item.price) + '</p>' +
                                '</div>' +
                                '</div>' +
                                '</div>';

                            productsHTML += cardHtml;
                        });

                        $('#divToUpdate').html(productsHTML);

                    }
                }
            });
        });
    });
    function formatPrice(price) {
        return (price).toLocaleString('vi-VN', { style: 'currency', currency: 'VND' });
    }

    document.addEventListener('DOMContentLoaded', function() {
        const productButtons = document.querySelectorAll('button[data-id]');
        const cardBody = document.querySelector('.card-body'); // Chọn phần tử chứa thông tin sản phẩm
        // Biến để lưu tổng giá của các sản phẩm đã chọn
        // Đối tượng để lưu trữ các sản phẩm đã chọn
        cardBody.style.display = 'flex';
        cardBody.style.flexWrap = 'wrap';
        cardBody.style.gap = '30px'; //
        productButtons.forEach(button => {
            button.addEventListener('click', function(event) {
                event.preventDefault();

                const productId = this.getAttribute('data-id');

                if (!chosenProducts[productId]) { // Kiểm tra nếu sản phẩm chưa được chọn
                    chosenProducts[productId] = true; // Đánh dấu sản phẩm đã chọn

                    const xhr = new XMLHttpRequest();
                    xhr.open('POST', '/QLBills/ChosenProduct');
                    xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
                    xhr.onreadystatechange = function() {
                        if (xhr.readyState === XMLHttpRequest.DONE) {
                            if (xhr.status === 200) {
                                const response = JSON.parse(xhr.responseText);
                                if (response.success) {
                                    const product = response.sanphamchitiets[0]; // Lấy thông tin sản phẩm
                                    const size = response.size;
                                    const color = response.color;

                                    const productContainer = document.createElement('div');
                                    productContainer.style.display = 'flex';
                                    productContainer.style.flexDirection = 'column'; // Hiển thị các phần tử theo chiều dọc
                                    productContainer.style.maxWidth = '700px'; // Hiển thị các phần tử theo chiều dọc
                                    cardBody.appendChild(productContainer);
                                    const productName = document.createElement('p');
                                    productName.textContent = `${product.name}`;
                                    productName.setAttribute('data-productid', product.id);
                                    productName.style.fontWeight = 'bold';
                                    productName.style.marginBottom = '5px';

                                    const sizeAndColor = document.createElement('p');
                                    sizeAndColor.textContent = `Size: ${size} | Màu: ${color}`;
                                    sizeAndColor.style.fontStyle = 'italic';
                                    sizeAndColor.style.marginBottom = '5px';

                                    productContainer.appendChild(productName);
                                    productContainer.appendChild(sizeAndColor);

                                    const productInfoContainer = document.createElement('div');
                                    productInfoContainer.style.display = 'flex';
                                    productInfoContainer.style.alignItems = 'center'; // Căn giữa các phần tử con theo chiều dọc
                                    productInfoContainer.style.marginTop = '5px'; // Khoảng cách từ tên sản phẩm đến số lượng

                                    const productQuantityLabel = document.createElement('p');
                                    productQuantityLabel.textContent = 'Số lượng: ';
                                    productInfoContainer.appendChild(productQuantityLabel);


                                    const productQuantityInput = document.createElement('input');
                                    productQuantityInput.setAttribute('type', 'number');
                                    productQuantityInput.setAttribute('value', '1');
                                    productQuantityInput.setAttribute('min', '1');
                                    productQuantityInput.setAttribute('max', product.quantity);
                                    productQuantityInput.setAttribute('name', 'soluong');

                                    // Tùy chỉnh CSS cho ô số lượng
                                    productQuantityInput.style.padding = '8px'; // Độ dày của viền
                                    productQuantityInput.style.border = '1px solid #ccc'; // Viền của ô
                                    productQuantityInput.style.borderRadius = '5px'; // Bo góc của ô
                                    productQuantityInput.style.width = '50px';
                                    productQuantityInput.style.fontSize = '14px'; // Kích thước chữ
                                    productQuantityInput.style.textAlign = 'center'; // Căn giữa nội dung

                                    const idprd = document.createElement('input');
                                    idprd.setAttribute('type', 'hidden');
                                    idprd.setAttribute('value', product.id);
                                    idprd.setAttribute('name', 'productId');

                                    productInfoContainer.appendChild(idprd);
                                    productInfoContainer.appendChild(productQuantityInput);

                                    const productPriceContainer = document.createElement('p');
                                    productPriceContainer.style.display = 'flex';
                                    productPriceContainer.style.alignItems = 'center';

                                    const productPrice = document.createElement('span');
                                    productPrice.textContent = `${formatPrice(product.price)}`;
                                    productPriceContainer.appendChild(productPrice);
                                    productPriceContainer.classList.add('product-price'); // Thêm lớp product-price vào phần tử chứa giá sản phẩm

                                    const productPriceVND = document.createElement('span');

                                    productPriceVND.style.marginLeft = '5px';
                                    productPriceContainer.appendChild(productPriceVND);

                                    const cancelButton = document.createElement('button');
                                    cancelButton.textContent = 'Hủy chọn';
                                    cancelButton.setAttribute('type', 'button');
                                    cancelButton.style.backgroundColor = '#F08080'; // Màu nền
                                    cancelButton.style.color = '#fff'; // Màu chữ
                                    cancelButton.style.border = 'none'; // Loại bỏ viền
                                    cancelButton.style.borderRadius = '5px'; // Bo góc
                                    cancelButton.style.padding = '5px 10px'; // Độ dày và khoảng cách giữa nút và chữ

                                    cancelButton.addEventListener('click', function() {
                                        // Lấy nội dung của productPrice.textContent
                                        var priceText = productPrice.textContent;

                                        // Sử dụng biểu thức chính quy để loại bỏ tất cả các ký tự không phải số
                                        var numericValue = priceText.replace(/[^\d]/g, '');

                                        // Chuyển đổi giá trị số thành số nguyên
                                        var priceValue = parseInt(numericValue);

                                        // Trừ giá trị cuối cùng từ tổng giá
                                        totalPrice -= priceValue;

                                        // Cập nhật tổng giá vào input có id là 'tong'
                                        tongInput1.value = totalPrice;
                                        tongInput2.textContent = formatPrice(totalPrice);
                                        // Xóa sản phẩm khỏi danh sách
                                        delete chosenProducts[productId];

                                        // Xóa sản phẩm khỏi giao diện người dùng
                                        productContainer.remove();
                                    });

                                    cancelButton.style.width = '170px';
                                    cancelButton.style.marginBottom = '17px';
                                    cancelButton.style.backgroundColor = '#F08080';
                                    cancelButton.style.borderRadius = '17px';

                                    productContainer.appendChild(productInfoContainer);
                                    productContainer.appendChild(productPriceContainer);
                                    productContainer.appendChild(cancelButton);


                                    cardBody.appendChild(productContainer);

                                    const tongInput1 = document.getElementById('tong');
                                    const productPriceValue = parseInt(productQuantityInput.value) * product.price;
                                    totalPrice += productPriceValue; // Cộng giá sản phẩm vào tổng giá
                                    tongInput1.value = totalPrice; // Cập nhật tổng giá vào input có id là 'tong'
                                    const tongInput2 = document.getElementById('tong2');
                                    tongInput2.textContent = formatPrice(totalPrice); //
                                    // Sự kiện thay đổi số lượng sản phẩm và tính tổng giá sản phẩm
                                    productQuantityInput.addEventListener('change', function() {
                                        const quantity = parseInt(productQuantityInput.value); // Lấy giá trị số lượng từ ô input

                                        if (!isNaN(quantity) && quantity > 0) {
                                            const updatedPrice = product.price * quantity; // Tính giá sản phẩm mới dựa trên số lượng nhập vào
                                            var priceText1 = productPrice.textContent;
                                            // Trừ giá cũ khỏi tổng giá
                                            var priceText1 = productPrice.textContent;
                                            var numericValue = priceText1.replace(/[^\d]/g, '');

                                            // Chuyển đổi giá trị số thành số nguyên
                                            var priceValue = parseInt(numericValue);
                                            totalPrice -= priceValue;
                                            // Sử dụng biểu thức chính quy để loại bỏ tất cả các ký tự không phải số

                                            productPrice.textContent = `${formatPrice(updatedPrice)}`;

                                            totalPrice += updatedPrice; // Cộng giá mới vào tổng giá

                                            const tongInput = document.getElementById('tong');
                                            const tongInput2 = document.getElementById('tong2');
                                            if (tongInput) {
                                                tongInput.value = totalPrice;
                                                tongInput2.textContent = formatPrice(totalPrice);
                                                // Cập nhật tổng giá vào input có id là 'tong'
                                            }
                                        } else {
                                            console.error('Số lượng không hợp lệ!');
                                        }
                                    });
                                } else {
                                    console.error('Có lỗi xảy ra khi lấy thông tin sản phẩm');
                                }
                            } else {
                                console.error('Yêu cầu không thành công');
                            }
                        }
                    };
                    xhr.send(`productId=${productId}`);
                } else {
                    console.log('Sản phẩm đã được chọn trước đó');
                    // Có thể hiển thị thông báo cho người dùng rằng sản phẩm đã được chọn trước đó
                }
            });
        });
    });

    document.addEventListener('DOMContentLoaded', (event) => {
        const container = document.getElementById('container');
        const quetButton = document.getElementById('quet');
 

        quetButton.addEventListener('click', () => {
            // Tạo và thêm video và kết quả vào container khi nút được nhấn
            const videoContainer = document.createElement('div');
            videoContainer.innerHTML = '<video id="preview" width="300" height="300"></video>';
            container.appendChild(videoContainer);

            // Khởi tạo và bắt đầu quét QR code với Instascan
            let scanner = new Instascan.Scanner({ video: document.getElementById('preview') });

            scanner.addListener('scan', function (content) {

                const cardBody = document.querySelector('.card-body'); // Chọn phần tử chứa thông tin sản phẩm
                // Biến để lưu tổng giá của các sản phẩm đã chọn
                // Đối tượng để lưu trữ các sản phẩm đã chọn
                cardBody.style.display = 'flex';
                cardBody.style.flexWrap = 'wrap';
                cardBody.style.gap = '30px'; //
                if (!chosenProducts[content]) { // Kiểm tra nếu sản phẩm chưa được chọn
                    chosenProducts[content] = true;
                     

                    const xhr = new XMLHttpRequest();
                    xhr.open('POST', '/QLBills/ChosenProduct');
                    xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
                    xhr.onreadystatechange = function () {
                        if (xhr.readyState === XMLHttpRequest.DONE) {
                            if (xhr.status === 200) {
                                const response = JSON.parse(xhr.responseText);
                                if (response.success) {
                                    // Xử lý thông tin sản phẩm được chọn tương tự như trong đoạn mã hiện tại
                                    // ...
                                    const product = response.sanphamchitiets[0]; // Lấy thông tin sản phẩm
                                    const size = response.size;
                                    const color = response.color;

                                    const productContainer = document.createElement('div');
                                    productContainer.style.display = 'flex';
                                    productContainer.style.flexDirection = 'column'; // Hiển thị các phần tử theo chiều dọc
                                    productContainer.style.maxWidth = '700px'; // Hiển thị các phần tử theo chiều dọc
                                    cardBody.appendChild(productContainer);

                                    const productName = document.createElement('p');
                                    productName.textContent = `${product.name}`;
                                    productName.setAttribute('data-productid', product.id);
                                    productName.style.fontWeight = 'bold';
                                    productName.style.marginBottom = '5px';

                                    const sizeAndColor = document.createElement('p');
                                    sizeAndColor.textContent = `Size: ${size} | Màu: ${color}`;
                                    sizeAndColor.style.fontStyle = 'italic';
                                    sizeAndColor.style.marginBottom = '5px';

                                    productContainer.appendChild(productName);
                                    productContainer.appendChild(sizeAndColor);

                                    const productInfoContainer = document.createElement('div');
                                    productInfoContainer.style.display = 'flex';
                                    productInfoContainer.style.alignItems = 'center'; // Căn giữa các phần tử con theo chiều dọc
                                    productInfoContainer.style.marginTop = '5px'; // Khoảng cách từ tên sản phẩm đến số lượng

                                    const productQuantityLabel = document.createElement('p');
                                    productQuantityLabel.textContent = 'Số lượng: ';
                                    productInfoContainer.appendChild(productQuantityLabel);


                                    const productQuantityInput = document.createElement('input');
                                    productQuantityInput.setAttribute('type', 'number');
                                    productQuantityInput.setAttribute('value', '1')

                                    productQuantityInput.setAttribute('min', '1');
                                    productQuantityInput.setAttribute('max', product.quantity);
                                    productQuantityInput.setAttribute('name', 'soluong');
                                    productQuantityInput.style.marginLeft = '5px';
                                    productQuantityInput.style.marginBottom = '12px';
                                    productQuantityInput.style.width = '50px';
                                    const idprd = document.createElement('input');
                                    idprd.setAttribute('type', 'hidden');
                                    idprd.setAttribute('value', product.id);

                                    idprd.setAttribute('name', 'productId');


                                    productInfoContainer.appendChild(idprd);

                                    productInfoContainer.appendChild(productQuantityInput);

                                    const productPriceContainer = document.createElement('p');
                                    productPriceContainer.style.display = 'flex';
                                    productPriceContainer.style.alignItems = 'center';

                                    const productPrice = document.createElement('span');
                                    productPrice.textContent = `${formatPrice(product.price)}`;
                                    productPriceContainer.appendChild(productPrice);
                                    productPriceContainer.classList.add('product-price'); // Thêm lớp product-price vào phần tử chứa giá sản phẩm

                                    const productPriceVND = document.createElement('span');

                                    productPriceVND.style.marginLeft = '5px';
                                    productPriceContainer.appendChild(productPriceVND);

                                    const cancelButton = document.createElement('button');
                                    //css
                                    cancelButton.textContent = 'Hủy chọn';
                                    cancelButton.setAttribute('type', 'button');
                                    cancelButton.style.backgroundColor = '#F08080'; // Màu nền
                                    cancelButton.style.color = '#fff'; // Màu chữ
                                    cancelButton.style.border = 'none'; // Loại bỏ viền
                                    cancelButton.style.borderRadius = '5px'; // Bo góc
                                    cancelButton.style.padding = '5px 10px'; // Độ dày và khoảng cách giữa nút và chữ
                                    //hàm
                                    cancelButton.addEventListener('click', function () {
                                        // Lấy nội dung của productPrice.textContent
                                        var priceText = productPrice.textContent;

                                        // Sử dụng biểu thức chính quy để loại bỏ tất cả các ký tự không phải số
                                        var numericValue = priceText.replace(/[^\d]/g, '');

                                        // Chuyển đổi giá trị số thành số nguyên
                                        var priceValue = parseInt(numericValue);

                                        // Trừ giá trị cuối cùng từ tổng giá
                                        totalPrice -= priceValue;

                                        // Cập nhật tổng giá vào input có id là 'tong'
                                        tongInput1.value = totalPrice;
                                        tongInput2.textContent = formatPrice(totalPrice);
                                        // Xóa sản phẩm khỏi danh sách
                                        delete chosenProducts[content];

                                        // Xóa sản phẩm khỏi giao diện người dùng
                                        productContainer.remove();
                                    });
                                    cancelButton.style.width = '170px';
                                    cancelButton.style.marginBottom = '17px';
                                    cancelButton.style.backgroundColor = '#F08080';
                                    cancelButton.style.borderRadius = '17px';
                                    //
                                    productContainer.appendChild(productInfoContainer);
                                    productContainer.appendChild(productPriceContainer);
                                    productContainer.appendChild(cancelButton);


                                    cardBody.appendChild(productContainer);

                                    const tongInput1 = document.getElementById('tong');
                                    const productPriceValue = parseInt(productQuantityInput.value) * product.price;
                                    totalPrice += productPriceValue; // Cộng giá sản phẩm vào tổng giá
                                    tongInput1.value = totalPrice; // Cập nhật tổng giá vào input có id là 'tong'
                                    const tongInput2 = document.getElementById('tong2');

                                    tongInput2.textContent = formatPrice(totalPrice); //
                                    // Sự kiện thay đổi số lượng sản phẩm và tính tổng giá sản phẩm
                                    productQuantityInput.addEventListener('change', function () {
                                        const quantity = parseInt(productQuantityInput.value); // Lấy giá trị số lượng từ ô input

                                        if (!isNaN(quantity) && quantity > 0) {
                                            const updatedPrice = product.price * quantity; // Tính giá sản phẩm mới dựa trên số lượng nhập vào
                                            var priceText1 = productPrice.textContent;
                                            // Trừ giá cũ khỏi tổng giá
                                            var priceText1 = productPrice.textContent;
                                            var numericValue = priceText1.replace(/[^\d]/g, '');

                                            // Chuyển đổi giá trị số thành số nguyên
                                            var priceValue = parseInt(numericValue);
                                            totalPrice -= priceValue;
                                            // Sử dụng biểu thức chính quy để loại bỏ tất cả các ký tự không phải số

                                            productPrice.textContent = `${formatPrice(updatedPrice)}`;

                                            totalPrice += updatedPrice; // Cộng giá mới vào tổng giá

                                            const tongInput = document.getElementById('tong');
                                            const tongInput2 = document.getElementById('tong2');
                                            if (tongInput) {
                                                tongInput.value = totalPrice;
                                                tongInput2.textContent = formatPrice(totalPrice);
                                                // Cập nhật tổng giá vào input có id là 'tong'
                                            }
                                        } else {
                                            console.error('Số lượng không hợp lệ!');
                                        }
                                    });
                                } else {
                                    console.error('Có lỗi xảy ra khi lấy thông tin sản phẩm');
                                }
                            } else {
                                console.error('Yêu cầu không thành công');
                            }
                        }
                    };
                    xhr.send(`productId=${content}`);
                } else {
             
             
                    }  

                    
                    
                    console.log('Sản phẩm đã được chọn trước đó');
          
                    // Có thể hiển thị thông báo cho người dùng rằng sản phẩm đã được chọn trước đó
                








            });

            Instascan.Camera.getCameras().then(function (cameras) {
                if (cameras.length > 0) {
                    scanner.start(cameras[0]);
                } else {
                    console.error('No cameras found.');
                }
            }).catch(function (e) {
                console.error(e);
            });
        });
    });
</script>

<script>


    document.getElementById("khachdua").addEventListener("input", function() {
        var khachDuaInput = document.getElementById("khachdua");

        // Lấy giá trị nhập vào từ trường "Tiền khách đưa"
        var khachDua = parseFloat(khachDuaInput.value);

        // Kiểm tra nếu giá trị nhập là số âm và không phải là 0
        if (!isNaN(khachDua) && khachDua < 0) {
            khachDuaInput.value = ""; // Xóa giá trị trên trường nhập liệu nếu là số âm
        }

        // Gọi hàm tính tiền thừa
        tinhTienThua();
    });

    function tinhTienThua() {
        // Lấy giá trị nhập vào từ trường "Tiền khách đưa"
        var khachDua = parseFloat(document.getElementById("khachdua").value);

        // Lấy giá trị tổng tiền từ trường "Tổng tiền" (giả sử bạn đã cập nhật giá trị này từ code khác)
        var tongTien = parseFloat(document.getElementById("tong").value);

        // Tính tiền thừa
        var tienThua = khachDua - tongTien;
        if (isNaN(khachDua)) {
            document.getElementById("error").textContent = "Vui lòng không nhập số âm.";
            document.getElementById("error").style.color = "red";
            return; // Kết thúc hàm tại đây nếu giá trị nhập không phải số
        }


        // Hiển thị giá trị tiền thừa và thông báo lỗi (nếu có)
        if (tienThua < 0) {
            document.getElementById("error").textContent = "Thiếu : " + (tienThua * (-1));
            document.getElementById("error").style.color = "red";
            // Ẩn nhãn "Tiền thừa" nếu không có tiền thừa
            document.getElementById("tienthua").textContent = ""; // Xóa nội dung trường "Tiền thừa"
        } else {
            // Cập nhật nhãn "Tiền thừa"
            document.getElementById("tienthua").textContent = "Thừa : " + tienThua; // Hiển thị tiền thừa
            document.getElementById("error").textContent = ""; // Xóa thông báo lỗi
        }
    }


</script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        var phoneNumberInput = document.getElementById('sdt');
        var phoneErrorSpan = document.getElementById('phoneError');

        phoneNumberInput.addEventListener('input', function() {
            var inputValue = phoneNumberInput.value;
            var cleanedValue = inputValue.replace(/[^0-9+]/g, '');
            cleanedValue = cleanedValue.slice(0, 10);
            phoneNumberInput.value = cleanedValue;
        });

        phoneNumberInput.addEventListener('blur', function() {
            validatePhoneNumber(phoneNumberInput.value);
        });

        function validatePhoneNumber(phoneNumber) {
            var phoneRegex = /^\+?[0-9]{1,4}-?[0-9]{3,4}-?[0-9]{4,}$/;

            if (phoneRegex.test(phoneNumber) && phoneNumber.startsWith('0')) {
                // Nếu số điện thoại hợp lệ, ẩn thông báo và hiển thị nền trắng cho ô nhập
                phoneErrorSpan.textContent = '';
                phoneNumberInput.style.backgroundColor = 'white';
            } else {
                if (phoneNumber.length < 10) {
                    // Hiển thị thông báo trong thẻ span khi số điện thoại có ít hơn 10 kí tự
                    phoneErrorSpan.textContent = 'Số điện thoại phải có ít nhất 10 kí tự.';
                } else if (!phoneNumber.startsWith('0')) {
                    // Hiển thị thông báo trong thẻ span khi số điện thoại không bắt đầu bằng số 0
                    phoneErrorSpan.textContent = 'Số điện thoại phải bắt đầu bằng số 0.';
                } else {
                    // Hiển thị thông báo trong thẻ span khi số điện thoại không hợp lệ
                    phoneErrorSpan.textContent = 'Số điện thoại không hợp lệ.';
                }


            }
        }
    });

    function layTenKhachHang() {
        var sdt = document.getElementById('sdt').value;

        $.ajax({
            url: '/QLBills/GetName', // Địa chỉ URL của phương thức trong CustomerController
            type: 'POST',
            data: { sdt: sdt },
            success: function(response) {
                // Xử lý dữ liệu nhận được từ server
                document.getElementById('tenkh').value = response.name;
            },
            error: function(xhr, status, error) {
                // Xử lý lỗi nếu có
                console.error(xhr.responseText);
            }
        });
    }


    
</script>

    <script>
        function submitForm(action) {
            document.getElementById('myForm').setAttribute('action', action);
            document.getElementById('myForm').submit();
        }
</script>



<script>
    function refreshPage() {
        window.location.href = 'https://localhost:7095/QLBills/BanHangOff';
    }
</script>



